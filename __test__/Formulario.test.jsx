import { render, screen, fireEvent } from "@testing-library/react";
import { describe, it, expect, vi } from "vitest";
import { MemoryRouter } from "react-router-dom";
import { CarritoContext } from "../src/context/CarritoContext";
import Formulario from "../src/pages/Formulario";

// üß© Mock de useNavigate para evitar redirecci√≥n real
vi.mock("react-router-dom", async (importOriginal) => {
  const actual = await importOriginal();
  return {
    ...actual,
    useNavigate: () => vi.fn(),
  };
});

// üß™ Helper para renderizar con contexto
const renderFormulario = (contextValue = { setUsuario: vi.fn() }) => {
  return render(
    <MemoryRouter>
      <CarritoContext.Provider value={contextValue}>
        <Formulario />
      </CarritoContext.Provider>
    </MemoryRouter>
  );
};

describe("üßæ Formulario de Registro", () => {
  it("‚ö†Ô∏è muestra error si se intentan enviar campos vac√≠os", () => {
    renderFormulario();

    const boton = screen.getByText("Registrarse");
    fireEvent.click(boton);

    expect(screen.getByText("Todos los campos son obligatorios.")).toBeInTheDocument();
  });

  it("‚ùå muestra error si las contrase√±as no coinciden", () => {
    renderFormulario();

    fireEvent.change(screen.getByPlaceholderText("Nombre completo"), {
      target: { value: "Benjam√≠n" },
    });
    fireEvent.change(screen.getByPlaceholderText("Correo electr√≥nico"), {
      target: { value: "benja@test.com" },
    });
    fireEvent.change(screen.getByPlaceholderText("Contrase√±a"), {
      target: { value: "1234" },
    });
    fireEvent.change(screen.getByPlaceholderText("Confirmar contrase√±a"), {
      target: { value: "5678" },
    });

    fireEvent.click(screen.getByText("Registrarse"));

    expect(screen.getByText("Las contrase√±as no coinciden.")).toBeInTheDocument();
  });

  it("‚úÖ registra correctamente al usuario y lo guarda en localStorage", () => {
    const setUsuarioMock = vi.fn();

    renderFormulario({ setUsuario: setUsuarioMock });

    fireEvent.change(screen.getByPlaceholderText("Nombre completo"), {
      target: { value: "Benjam√≠n" },
    });
    fireEvent.change(screen.getByPlaceholderText("Correo electr√≥nico"), {
      target: { value: "benja@test.com" },
    });
    fireEvent.change(screen.getByPlaceholderText("Contrase√±a"), {
      target: { value: "1234" },
    });
    fireEvent.change(screen.getByPlaceholderText("Confirmar contrase√±a"), {
      target: { value: "1234" },
    });

    fireEvent.click(screen.getByText("Registrarse"));

    // ‚úÖ Verifica que se guarda el usuario
    const registrado = JSON.parse(localStorage.getItem("usuarioRegistrado"));
    expect(registrado).toEqual({
      nombre: "Benjam√≠n",
      correo: "benja@test.com",
      password: "1234",
    });

    // ‚úÖ Se llama al contexto con el nombre
    expect(setUsuarioMock).toHaveBeenCalledWith("Benjam√≠n");
  });
});
